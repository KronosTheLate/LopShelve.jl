var documenterSearchIndex = {"docs":
[{"location":"#LopShelve.jl-Documentation","page":"LopShelve.jl Documentation","title":"LopShelve.jl Documentation","text":"","category":"section"},{"location":"","page":"LopShelve.jl Documentation","title":"LopShelve.jl Documentation","text":"","category":"page"},{"location":"#What-is-LopShelve","page":"LopShelve.jl Documentation","title":"What is LopShelve","text":"","category":"section"},{"location":"","page":"LopShelve.jl Documentation","title":"LopShelve.jl Documentation","text":"A shelf is an object similar to a dictionary but which allows data persistence. You could thus save your data in a file as if it were a dictionary. This julia implementation is based on the Shelve version of python. So if you used the Shelve version of python you would not be out of place. However this implementation does not stop there, you could also use LopShelve to map  your data from database (Sqlite) to dictionary","category":"page"},{"location":"#Function","page":"LopShelve.jl Documentation","title":"Function","text":"","category":"section"},{"location":"","page":"LopShelve.jl Documentation","title":"LopShelve.jl Documentation","text":"Modules = [LopShelve]\nOrder   = [:function]","category":"page"},{"location":"#Base.in-Tuple{Any,ShelfSql}","page":"LopShelve.jl Documentation","title":"Base.in","text":"Base.in(item::Any, x::ShelfSql)\n\nReturn true if the item is in the table\n\n\njulia> \"a\" in db => true\njulia> (\"a\", \"b\") in db => true # multiple primary keys\n\n\n\n\n\n","category":"method"},{"location":"#Base.iterate","page":"LopShelve.jl Documentation","title":"Base.iterate","text":"Base.iterate(x::ShelfSql, state::Int64=1)::Union{Tuple{Any,Int64}, Nothing}\n\nIterate over the table and return the key and the value of each row. It's very useful  to iterate through the whole table with a loop or check if an element exists in the table\n\nfor i in db\n    print(i)\nend\n\n\n\n\n\n","category":"function"},{"location":"#Base.keys-Tuple{ShelfSql}","page":"LopShelve.jl Documentation","title":"Base.keys","text":"Base.keys(x::ShelfSql)\n\nReturn the primary keys of the table\n\njulia> keys(db) # Will return the primary keys of the table\n\n\n\n\n\n","category":"method"},{"location":"#Base.length-Tuple{ShelfSql}","page":"LopShelve.jl Documentation","title":"Base.length","text":"Base.length(x::ShelfSql) :: Int64\n\nReturn the number of rows in the table\n\njulia> length(db)  # 2 (We have 2 rows in the table)\n\n\n\n\n\n","category":"method"},{"location":"#Base.setindex!-Tuple{ShelfSql,NamedTuple,Any}","page":"LopShelve.jl Documentation","title":"Base.setindex!","text":"Base.setindex!(s::ShelfSql, value::NamedTuple, key)\n\nCreate a new row in the database or modify an existing row in the database Usually this method is called with bracket square in which we put the key's value and the row's value is the affected value.\n\n    Exemple:\n    db[\"justin\"] = (year=2000, country=\"USA\")\n    # Multiple index values\n    db[(\"John\", \"Doe\")] = (year=1999, country=\"Benin\")\n\n\n\n\n\n\n","category":"method"},{"location":"#LopShelve.commit-Tuple{Shelf}","page":"LopShelve.jl Documentation","title":"LopShelve.commit","text":"commit(s::Shelf)\n\nSave the shelve data in the file\n\n\n\n\n\n","category":"method"},{"location":"#LopShelve.delete-Tuple{AbstractShelf}","page":"LopShelve.jl Documentation","title":"LopShelve.delete","text":"delete(s::Shelf)\n\ndelete the shelve file \n\n\n\n\n\n","category":"method"},{"location":"#LopShelve.open!-Tuple{Any,String}","page":"LopShelve.jl Documentation","title":"LopShelve.open!","text":"open(f, filename::String)\n\nOpen a given file in a context manager\n\nIf the file don't exist an empty Shelve object is created. Also  the file name must'nt have extension\n\n\n\n\n\n","category":"method"},{"location":"#LopShelve.open!-Tuple{String,String}","page":"LopShelve.jl Documentation","title":"LopShelve.open!","text":"open!(filename::String, table::String)\n\nOpen a given sqlite table from a given filename in a Shelf object\n\nIf the file don't exist an error is thrown\n\n\n\n\n\n","category":"method"},{"location":"#LopShelve.open!-Tuple{String}","page":"LopShelve.jl Documentation","title":"LopShelve.open!","text":"open(filename::String)\n\nOpen a given file in a Shelf object\n\nIf the file don't exist an empty Shelve object is created. Also  the file name must'nt have extension\n\n\n\n\n\n","category":"method"},{"location":"#LopShelve.primary_key_finder-Tuple{Any,Any}","page":"LopShelve.jl Documentation","title":"LopShelve.primary_key_finder","text":"primary_key_finder(db, table)\n\nFind the primary of a given table.\n\n\n\n\n\n","category":"method"},{"location":"#LopShelve.value_process-Tuple{Any}","page":"LopShelve.jl Documentation","title":"LopShelve.value_process","text":"value_process(key)\n\nProcess the key send in indexing by the user: if the key is a single value, we convert it to a tuple Moreover we add single quote to the string in order to bind the sql query \n\n    value_process(\"a\") => (\"a\", )\n    value_process((\"a\", \"b\")) => (\"a\", \"b\")\n\n\n\n\n\n","category":"method"},{"location":"#Index","page":"LopShelve.jl Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"LopShelve.jl Documentation","title":"LopShelve.jl Documentation","text":"","category":"page"}]
}
